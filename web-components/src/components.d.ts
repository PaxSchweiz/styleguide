/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonTypes, CheckboxIcon, Color, Fill, Locale, Mode, StyleEventDetail, TextFieldTypes } from "./interface";
import { CheckboxChangeEventInterface } from "./components/checkbox/checkbox.interface";
import { InputChangeEventDetail } from "./components/input/input";
import { InputChangeEventDetail as InputChangeEventDetail1 } from "./components/input/input";
import { RadioGroupChangeEventInterface } from "./components/radio-group/radio-group.interface";
import { TextareaChangeEventDetail } from "./components/textarea/textarea";
export namespace Components {
    interface PaxBadge {
        /**
          * The color to use from the pax color palette. Options are: `'success'`, `'warning'`, `'danger'`, `'dark'`, `'light'`, `'ghost'`
         */
        "color"?: Color;
    }
    interface PaxBusyIndicator {
        /**
          * The color to use from the pax color palette. Options are: `'success'`, `'warning'`, `'danger'`, `'dark'`, `'light'`.
         */
        "color"?: Color;
        /**
          * If set, the busy indicator component is hidden.
         */
        "hidden": boolean;
    }
    interface PaxButton {
        /**
          * If `true`, the user cannot interact with the button component.
          * @type {boolean}
         */
        "disabled": boolean;
        /**
          * The type of button that should be displayed. Options are: `'clear'` or `'outline'`
          * @type {string}
         */
        "fill": Fill;
        /**
          * The mode changes the appearance of the button depending on the overall theme. Options are: `'light'` or `'dark'`
          * @type {Mode}
         */
        "mode": Mode;
        /**
          * The type of the native button that gets rendered. Options are: `'submit'` or `'reset'`
          * @type {string}
         */
        "type": ButtonTypes;
    }
    interface PaxCard {
        /**
          * The color of the border. Options are: 'success' | 'warning' | 'danger' | 'dark' | 'light'
          * @type {Color}
         */
        "border": Color;
        /**
          * The text of the header.
          * @type {string}
         */
        "header": string;
    }
    interface PaxCarousel {
    }
    interface PaxCarouselItem {
    }
    interface PaxCheckbox {
        /**
          * If set, the checkbox is selected.
          * @type {boolean}
         */
        "checked": boolean;
        /**
          * If set, the user cannot interact with the checkbox component.
          * @type {boolean}
         */
        "disabled": boolean;
        /**
          * The type of the checkbox icon. Options are: `'checkbox'` | `'switch'`. Defaults to `'checkbox'`
          * @type {CheckboxIcon}
         */
        "icon": CheckboxIcon;
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name": string;
        /**
          * The value of the checkbox, which is submitted with the form data.
          * @type {string}
         */
        "value": string;
    }
    interface PaxCol {
    }
    interface PaxDatepicker {
        /**
          * If set, the user cannot interact with the input component.
          * @type {boolean}
         */
        "disabled": boolean;
        /**
          * The error message that is displayed next to the component.
          * @type {string}
         */
        "error": string;
        /**
          * When called focuses the native input element of the component.
         */
        "focusInput": () => Promise<void>;
        /**
          * If set, the component is visually marked as invalid.
          * @type {boolean}
         */
        "invalid": boolean;
        /**
          * The locale to use. Options are: `'de'`, `'fr'` or `'it'`.
          * @type {Locale}
         */
        "localeProp": Locale;
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name": string;
        /**
          * If set, the user cannot change the value of the input component.
          * @type {boolean}
         */
        "readonly": boolean;
        /**
          * The value of the datepicker component.
          * @type {string|number}
         */
        "value": string;
    }
    interface PaxDialog {
        /**
          * When called closes the dialog component.
         */
        "close": () => Promise<void>;
        /**
          * The text of the header.
          * @type {string}
         */
        "header": string;
        /**
          * When called opens the dialog component.
         */
        "open": () => Promise<void>;
    }
    interface PaxGrid {
    }
    interface PaxHeadline {
        /**
          * The headline level of the native element.
          * @type {number}
         */
        "level": number;
    }
    interface PaxIcon {
    }
    interface PaxInput {
        /**
          * If set, the user cannot interact with the input component.
          * @type {boolean}
         */
        "disabled": boolean;
        /**
          * The error message that is displayed next to the component.
          * @type {string}
         */
        "error": string;
        /**
          * When called focuses the native input element of the component.
         */
        "focusInput": () => Promise<void>;
        /**
          * If set, the component is visually marked as invalid.
          * @type {boolean}
         */
        "invalid": boolean;
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name": string;
        /**
          * If set, the user cannot change the value of the input component.
          * @type {boolean}
         */
        "readonly": boolean;
        /**
          * The type of the native input element. Options are: `'email'` | `'number'` | `'password'` | `'search'` | `'tel'` | `'text'` | `'url'`.
          * @type {TextFieldTypes}
         */
        "type": TextFieldTypes;
        /**
          * The value of the input component.
          * @type {string|number}
         */
        "value"?: string | number | null;
    }
    interface PaxItem {
        /**
          * The color to use from the pax color palette. Options are: `'success'`, `'warning'`, `'danger'`, `'dark'`
         */
        "color"?: Color;
    }
    interface PaxLabel {
        /**
          * The id of of the element that this label should be linked to.
          * @type {string}
         */
        "for"?: string;
        /**
          * The position determines where and how the label behaves inside an item.
         */
        "position"?: 'floating';
        /**
          * If set, the label component gets marked as required.
          * @type {boolean}
         */
        "required"?: boolean;
        /**
          * The suffix that should be displayed when used in combination with an input component.
          * @type {string}
         */
        "suffix"?: string;
        /**
          * If set, the label component wraps other wise it gets clipped with '...' when there is no space left.
          * @type {boolean}
         */
        "wrap"?: boolean;
    }
    interface PaxLink {
        /**
          * If set, the user cannot interact with the link component.
          * @type {boolean}
         */
        "disabled": boolean;
        /**
          * If set, the link component gets displayed emphasized.
          * @type {boolean}
         */
        "emphasized": boolean;
        /**
          * The `href` value of the native anchor element. This is only used when the link component is not disabled.
         */
        "href": string;
        /**
          * If set, the link component gets displayed muted.
          * @type {boolean}
         */
        "muted": boolean;
        /**
          * The `target` value of the native anchor element. This is only used when the link component has a a `href` value and is not disabled.
         */
        "target": string;
    }
    interface PaxList {
        /**
          * If set, the list component will displayed in an inline layout.
          * @type {boolean}
         */
        "inline": boolean;
        /**
          * If set, the list component gets displayed with a padding.
          * @type {boolean}
         */
        "inset": boolean;
        /**
          * If set, the list component gets displayed with lines separating each row. Has no effect when `inline` is also set.
          * @type {boolean}
         */
        "lines": boolean;
    }
    interface PaxMessageStrip {
        /**
          * The color to use from the pax color palette. Options are: `'success'`, `'warning'`, `'danger'`, `'dark'`, `'light'`, `'ghost'`
          * @type {Color}
         */
        "color"?: Color;
        /**
          * The icon to use. Options are: `'info'`, `'success'`, `'warning'`, `'danger'`
          * @type {string}
         */
        "icon"?: string;
    }
    interface PaxPagination {
    }
    interface PaxPanel {
        /**
          * If `true`, the panel is expanded.
          * @type {boolean}
         */
        "open": boolean;
    }
    interface PaxProgressBar {
        /**
          * The color to use from the pax color palette. Options are: `'success'`, `'warning'`, `'danger'`, `'dark'`, `'light'`
          * @type {Color}
         */
        "color"?: Color;
        /**
          * Use compact design.
          * @type {boolean}
         */
        "compact"?: boolean;
        /**
          * Use inline layout.
          * @type {boolean}
         */
        "inline"?: boolean;
        /**
          * The value determines how much of the progress bar should display. The value should be between 0 and 1.
          * @type {number}
         */
        "value": number;
    }
    interface PaxRadio {
        /**
          * If set, the user cannot interact with the checkbox component.
          * @type {boolean}
         */
        "disabled": boolean;
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name": string;
        /**
          * The value of the radio, which is submitted with the form data.
          * @type {string}
         */
        "value": string;
    }
    interface PaxRadioGroup {
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name": string;
        /**
          * The value of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "value"?: string;
    }
    interface PaxRow {
    }
    interface PaxSelect {
        /**
          * If set, the user cannot interact with the select component.
          * @type {boolean}
         */
        "disabled": boolean;
        /**
          * The error message that is displayed next to the component.
          * @type {string}
         */
        "error": string;
        /**
          * When called focuses the native input element of the component.
         */
        "focusInput": () => Promise<void>;
        /**
          * If set, the component is visually marked as invalid.
          * @type {boolean}
         */
        "invalid": boolean;
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name": string;
        /**
          * If set, the user cannot change the value of the select component.
          * @type {boolean}
         */
        "readonly": boolean;
        /**
          * The value of the select component.
          * @type {string}
         */
        "value": string;
    }
    interface PaxSelectOption {
        /**
          * Add an additional abbreviation to a select option.
         */
        "abbreviation"?: string;
        /**
          * If `true`, the user cannot interact with the select option.
         */
        "disabled"?: boolean;
        /**
          * Marks the select option, whose value is submitted with the form data.
          * @type {string}
         */
        "selected"?: boolean;
        /**
          * The value of the select option, which is submitted with the form data.
          * @type {string}
         */
        "value": string;
    }
    interface PaxTextarea {
        /**
          * If set, the user cannot interact with the textarea component.
          * @type {boolean}
         */
        "disabled": boolean;
        /**
          * The error message that is displayed next to the component.
          * @type {string}
         */
        "error": string;
        /**
          * When called focuses the native textarea element of the component.
         */
        "focusInput": () => Promise<void>;
        /**
          * If set, the component is visually marked as invalid.
          * @type {boolean}
         */
        "invalid": boolean;
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name": string;
        /**
          * The placeholder message that should be displayed when not value is set.
          * @type {string}
         */
        "placeholder": string;
        /**
          * If set, the user cannot change the value of the textarea component.
          * @type {boolean}
         */
        "readonly": boolean;
        /**
          * The initial height of the textarea component defined in rows.
          * @type {number}
         */
        "rows": number;
        /**
          * The value of the textarea component.
          * @type {string}
         */
        "value"?: string | null;
    }
    interface PaxTitle {
        /**
          * The headline level of the native element.
          * @type {number}
         */
        "level": number;
    }
    interface PaxTooltip {
        /**
          * If set, the tooltip displays a close button.
         */
        "closable": boolean;
    }
}
declare global {
    interface HTMLPaxBadgeElement extends Components.PaxBadge, HTMLStencilElement {
    }
    var HTMLPaxBadgeElement: {
        prototype: HTMLPaxBadgeElement;
        new (): HTMLPaxBadgeElement;
    };
    interface HTMLPaxBusyIndicatorElement extends Components.PaxBusyIndicator, HTMLStencilElement {
    }
    var HTMLPaxBusyIndicatorElement: {
        prototype: HTMLPaxBusyIndicatorElement;
        new (): HTMLPaxBusyIndicatorElement;
    };
    interface HTMLPaxButtonElement extends Components.PaxButton, HTMLStencilElement {
    }
    var HTMLPaxButtonElement: {
        prototype: HTMLPaxButtonElement;
        new (): HTMLPaxButtonElement;
    };
    interface HTMLPaxCardElement extends Components.PaxCard, HTMLStencilElement {
    }
    var HTMLPaxCardElement: {
        prototype: HTMLPaxCardElement;
        new (): HTMLPaxCardElement;
    };
    interface HTMLPaxCarouselElement extends Components.PaxCarousel, HTMLStencilElement {
    }
    var HTMLPaxCarouselElement: {
        prototype: HTMLPaxCarouselElement;
        new (): HTMLPaxCarouselElement;
    };
    interface HTMLPaxCarouselItemElement extends Components.PaxCarouselItem, HTMLStencilElement {
    }
    var HTMLPaxCarouselItemElement: {
        prototype: HTMLPaxCarouselItemElement;
        new (): HTMLPaxCarouselItemElement;
    };
    interface HTMLPaxCheckboxElement extends Components.PaxCheckbox, HTMLStencilElement {
    }
    var HTMLPaxCheckboxElement: {
        prototype: HTMLPaxCheckboxElement;
        new (): HTMLPaxCheckboxElement;
    };
    interface HTMLPaxColElement extends Components.PaxCol, HTMLStencilElement {
    }
    var HTMLPaxColElement: {
        prototype: HTMLPaxColElement;
        new (): HTMLPaxColElement;
    };
    interface HTMLPaxDatepickerElement extends Components.PaxDatepicker, HTMLStencilElement {
    }
    var HTMLPaxDatepickerElement: {
        prototype: HTMLPaxDatepickerElement;
        new (): HTMLPaxDatepickerElement;
    };
    interface HTMLPaxDialogElement extends Components.PaxDialog, HTMLStencilElement {
    }
    var HTMLPaxDialogElement: {
        prototype: HTMLPaxDialogElement;
        new (): HTMLPaxDialogElement;
    };
    interface HTMLPaxGridElement extends Components.PaxGrid, HTMLStencilElement {
    }
    var HTMLPaxGridElement: {
        prototype: HTMLPaxGridElement;
        new (): HTMLPaxGridElement;
    };
    interface HTMLPaxHeadlineElement extends Components.PaxHeadline, HTMLStencilElement {
    }
    var HTMLPaxHeadlineElement: {
        prototype: HTMLPaxHeadlineElement;
        new (): HTMLPaxHeadlineElement;
    };
    interface HTMLPaxIconElement extends Components.PaxIcon, HTMLStencilElement {
    }
    var HTMLPaxIconElement: {
        prototype: HTMLPaxIconElement;
        new (): HTMLPaxIconElement;
    };
    interface HTMLPaxInputElement extends Components.PaxInput, HTMLStencilElement {
    }
    var HTMLPaxInputElement: {
        prototype: HTMLPaxInputElement;
        new (): HTMLPaxInputElement;
    };
    interface HTMLPaxItemElement extends Components.PaxItem, HTMLStencilElement {
    }
    var HTMLPaxItemElement: {
        prototype: HTMLPaxItemElement;
        new (): HTMLPaxItemElement;
    };
    interface HTMLPaxLabelElement extends Components.PaxLabel, HTMLStencilElement {
    }
    var HTMLPaxLabelElement: {
        prototype: HTMLPaxLabelElement;
        new (): HTMLPaxLabelElement;
    };
    interface HTMLPaxLinkElement extends Components.PaxLink, HTMLStencilElement {
    }
    var HTMLPaxLinkElement: {
        prototype: HTMLPaxLinkElement;
        new (): HTMLPaxLinkElement;
    };
    interface HTMLPaxListElement extends Components.PaxList, HTMLStencilElement {
    }
    var HTMLPaxListElement: {
        prototype: HTMLPaxListElement;
        new (): HTMLPaxListElement;
    };
    interface HTMLPaxMessageStripElement extends Components.PaxMessageStrip, HTMLStencilElement {
    }
    var HTMLPaxMessageStripElement: {
        prototype: HTMLPaxMessageStripElement;
        new (): HTMLPaxMessageStripElement;
    };
    interface HTMLPaxPaginationElement extends Components.PaxPagination, HTMLStencilElement {
    }
    var HTMLPaxPaginationElement: {
        prototype: HTMLPaxPaginationElement;
        new (): HTMLPaxPaginationElement;
    };
    interface HTMLPaxPanelElement extends Components.PaxPanel, HTMLStencilElement {
    }
    var HTMLPaxPanelElement: {
        prototype: HTMLPaxPanelElement;
        new (): HTMLPaxPanelElement;
    };
    interface HTMLPaxProgressBarElement extends Components.PaxProgressBar, HTMLStencilElement {
    }
    var HTMLPaxProgressBarElement: {
        prototype: HTMLPaxProgressBarElement;
        new (): HTMLPaxProgressBarElement;
    };
    interface HTMLPaxRadioElement extends Components.PaxRadio, HTMLStencilElement {
    }
    var HTMLPaxRadioElement: {
        prototype: HTMLPaxRadioElement;
        new (): HTMLPaxRadioElement;
    };
    interface HTMLPaxRadioGroupElement extends Components.PaxRadioGroup, HTMLStencilElement {
    }
    var HTMLPaxRadioGroupElement: {
        prototype: HTMLPaxRadioGroupElement;
        new (): HTMLPaxRadioGroupElement;
    };
    interface HTMLPaxRowElement extends Components.PaxRow, HTMLStencilElement {
    }
    var HTMLPaxRowElement: {
        prototype: HTMLPaxRowElement;
        new (): HTMLPaxRowElement;
    };
    interface HTMLPaxSelectElement extends Components.PaxSelect, HTMLStencilElement {
    }
    var HTMLPaxSelectElement: {
        prototype: HTMLPaxSelectElement;
        new (): HTMLPaxSelectElement;
    };
    interface HTMLPaxSelectOptionElement extends Components.PaxSelectOption, HTMLStencilElement {
    }
    var HTMLPaxSelectOptionElement: {
        prototype: HTMLPaxSelectOptionElement;
        new (): HTMLPaxSelectOptionElement;
    };
    interface HTMLPaxTextareaElement extends Components.PaxTextarea, HTMLStencilElement {
    }
    var HTMLPaxTextareaElement: {
        prototype: HTMLPaxTextareaElement;
        new (): HTMLPaxTextareaElement;
    };
    interface HTMLPaxTitleElement extends Components.PaxTitle, HTMLStencilElement {
    }
    var HTMLPaxTitleElement: {
        prototype: HTMLPaxTitleElement;
        new (): HTMLPaxTitleElement;
    };
    interface HTMLPaxTooltipElement extends Components.PaxTooltip, HTMLStencilElement {
    }
    var HTMLPaxTooltipElement: {
        prototype: HTMLPaxTooltipElement;
        new (): HTMLPaxTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "pax-badge": HTMLPaxBadgeElement;
        "pax-busy-indicator": HTMLPaxBusyIndicatorElement;
        "pax-button": HTMLPaxButtonElement;
        "pax-card": HTMLPaxCardElement;
        "pax-carousel": HTMLPaxCarouselElement;
        "pax-carousel-item": HTMLPaxCarouselItemElement;
        "pax-checkbox": HTMLPaxCheckboxElement;
        "pax-col": HTMLPaxColElement;
        "pax-datepicker": HTMLPaxDatepickerElement;
        "pax-dialog": HTMLPaxDialogElement;
        "pax-grid": HTMLPaxGridElement;
        "pax-headline": HTMLPaxHeadlineElement;
        "pax-icon": HTMLPaxIconElement;
        "pax-input": HTMLPaxInputElement;
        "pax-item": HTMLPaxItemElement;
        "pax-label": HTMLPaxLabelElement;
        "pax-link": HTMLPaxLinkElement;
        "pax-list": HTMLPaxListElement;
        "pax-message-strip": HTMLPaxMessageStripElement;
        "pax-pagination": HTMLPaxPaginationElement;
        "pax-panel": HTMLPaxPanelElement;
        "pax-progress-bar": HTMLPaxProgressBarElement;
        "pax-radio": HTMLPaxRadioElement;
        "pax-radio-group": HTMLPaxRadioGroupElement;
        "pax-row": HTMLPaxRowElement;
        "pax-select": HTMLPaxSelectElement;
        "pax-select-option": HTMLPaxSelectOptionElement;
        "pax-textarea": HTMLPaxTextareaElement;
        "pax-title": HTMLPaxTitleElement;
        "pax-tooltip": HTMLPaxTooltipElement;
    }
}
declare namespace LocalJSX {
    interface PaxBadge {
        /**
          * The color to use from the pax color palette. Options are: `'success'`, `'warning'`, `'danger'`, `'dark'`, `'light'`, `'ghost'`
         */
        "color"?: Color;
    }
    interface PaxBusyIndicator {
        /**
          * The color to use from the pax color palette. Options are: `'success'`, `'warning'`, `'danger'`, `'dark'`, `'light'`.
         */
        "color"?: Color;
        /**
          * If set, the busy indicator component is hidden.
         */
        "hidden"?: boolean;
    }
    interface PaxButton {
        /**
          * If `true`, the user cannot interact with the button component.
          * @type {boolean}
         */
        "disabled"?: boolean;
        /**
          * The type of button that should be displayed. Options are: `'clear'` or `'outline'`
          * @type {string}
         */
        "fill"?: Fill;
        /**
          * The mode changes the appearance of the button depending on the overall theme. Options are: `'light'` or `'dark'`
          * @type {Mode}
         */
        "mode"?: Mode;
        /**
          * Emitted when the button lost focus.
         */
        "onButtonBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onButtonFocus"?: (event: CustomEvent<void>) => void;
        /**
          * The type of the native button that gets rendered. Options are: `'submit'` or `'reset'`
          * @type {string}
         */
        "type"?: ButtonTypes;
    }
    interface PaxCard {
        /**
          * The color of the border. Options are: 'success' | 'warning' | 'danger' | 'dark' | 'light'
          * @type {Color}
         */
        "border"?: Color;
        /**
          * The text of the header.
          * @type {string}
         */
        "header"?: string;
    }
    interface PaxCarousel {
    }
    interface PaxCarouselItem {
    }
    interface PaxCheckbox {
        /**
          * If set, the checkbox is selected.
          * @type {boolean}
         */
        "checked"?: boolean;
        /**
          * If set, the user cannot interact with the checkbox component.
          * @type {boolean}
         */
        "disabled"?: boolean;
        /**
          * The type of the checkbox icon. Options are: `'checkbox'` | `'switch'`. Defaults to `'checkbox'`
          * @type {CheckboxIcon}
         */
        "icon"?: CheckboxIcon;
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name"?: string;
        /**
          * Gets emitted when the checkbox component lost focus.
         */
        "onCheckboxBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted when the checked property has changed.
         */
        "onCheckboxChange"?: (event: CustomEvent<CheckboxChangeEventInterface>) => void;
        /**
          * Gets emitted when the checkbox component has focus.
         */
        "onCheckboxFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted when the styles change.
         */
        "onPaxStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        /**
          * The value of the checkbox, which is submitted with the form data.
          * @type {string}
         */
        "value"?: string;
    }
    interface PaxCol {
    }
    interface PaxDatepicker {
        /**
          * If set, the user cannot interact with the input component.
          * @type {boolean}
         */
        "disabled"?: boolean;
        /**
          * The error message that is displayed next to the component.
          * @type {string}
         */
        "error"?: string;
        /**
          * If set, the component is visually marked as invalid.
          * @type {boolean}
         */
        "invalid"?: boolean;
        /**
          * The locale to use. Options are: `'de'`, `'fr'` or `'it'`.
          * @type {Locale}
         */
        "localeProp"?: Locale;
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name"?: string;
        /**
          * Gets emitted when the input component lost focus.
         */
        "onDatepickerBlurred"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted when the datepicker component's value changed.
         */
        "onDatepickerChanged"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Gets emitted when the input component has focus.
         */
        "onDatepickerFocused"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted when a keyboard input occurred.
         */
        "onDatepickerInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Gets emitted when the styles change.
         */
        "onPaxStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        /**
          * If set, the user cannot change the value of the input component.
          * @type {boolean}
         */
        "readonly"?: boolean;
        /**
          * The value of the datepicker component.
          * @type {string|number}
         */
        "value"?: string;
    }
    interface PaxDialog {
        /**
          * The text of the header.
          * @type {string}
         */
        "header"?: string;
        /**
          * Gets emitted after the dialog component is closed.
         */
        "onAfterClose"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted after the dialog component is opened.
         */
        "onAfterOpen"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted before the dialog component is closed.
         */
        "onBeforeClose"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted before the dialog component is opened.
         */
        "onBeforeOpen"?: (event: CustomEvent<void>) => void;
    }
    interface PaxGrid {
    }
    interface PaxHeadline {
        /**
          * The headline level of the native element.
          * @type {number}
         */
        "level"?: number;
    }
    interface PaxIcon {
    }
    interface PaxInput {
        /**
          * If set, the user cannot interact with the input component.
          * @type {boolean}
         */
        "disabled"?: boolean;
        /**
          * The error message that is displayed next to the component.
          * @type {string}
         */
        "error"?: string;
        /**
          * If set, the component is visually marked as invalid.
          * @type {boolean}
         */
        "invalid"?: boolean;
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name"?: string;
        /**
          * Gets emitted when the input component lost focus.
         */
        "onInputBlurred"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted when the input component's value changed.
         */
        "onInputChanged"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Gets emitted when the input component has focus.
         */
        "onInputFocused"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted when a keyboard input occurred.
         */
        "onInputInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Gets emitted when the styles change.
         */
        "onPaxStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        /**
          * If set, the user cannot change the value of the input component.
          * @type {boolean}
         */
        "readonly"?: boolean;
        /**
          * The type of the native input element. Options are: `'email'` | `'number'` | `'password'` | `'search'` | `'tel'` | `'text'` | `'url'`.
          * @type {TextFieldTypes}
         */
        "type"?: TextFieldTypes;
        /**
          * The value of the input component.
          * @type {string|number}
         */
        "value"?: string | number | null;
    }
    interface PaxItem {
        /**
          * The color to use from the pax color palette. Options are: `'success'`, `'warning'`, `'danger'`, `'dark'`
         */
        "color"?: Color;
    }
    interface PaxLabel {
        /**
          * The id of of the element that this label should be linked to.
          * @type {string}
         */
        "for"?: string;
        /**
          * Gets emitted when the styles change.
         */
        "onPaxStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        /**
          * The position determines where and how the label behaves inside an item.
         */
        "position"?: 'floating';
        /**
          * If set, the label component gets marked as required.
          * @type {boolean}
         */
        "required"?: boolean;
        /**
          * The suffix that should be displayed when used in combination with an input component.
          * @type {string}
         */
        "suffix"?: string;
        /**
          * If set, the label component wraps other wise it gets clipped with '...' when there is no space left.
          * @type {boolean}
         */
        "wrap"?: boolean;
    }
    interface PaxLink {
        /**
          * If set, the user cannot interact with the link component.
          * @type {boolean}
         */
        "disabled"?: boolean;
        /**
          * If set, the link component gets displayed emphasized.
          * @type {boolean}
         */
        "emphasized"?: boolean;
        /**
          * The `href` value of the native anchor element. This is only used when the link component is not disabled.
         */
        "href"?: string;
        /**
          * If set, the link component gets displayed muted.
          * @type {boolean}
         */
        "muted"?: boolean;
        /**
          * The `target` value of the native anchor element. This is only used when the link component has a a `href` value and is not disabled.
         */
        "target"?: string;
    }
    interface PaxList {
        /**
          * If set, the list component will displayed in an inline layout.
          * @type {boolean}
         */
        "inline"?: boolean;
        /**
          * If set, the list component gets displayed with a padding.
          * @type {boolean}
         */
        "inset"?: boolean;
        /**
          * If set, the list component gets displayed with lines separating each row. Has no effect when `inline` is also set.
          * @type {boolean}
         */
        "lines"?: boolean;
    }
    interface PaxMessageStrip {
        /**
          * The color to use from the pax color palette. Options are: `'success'`, `'warning'`, `'danger'`, `'dark'`, `'light'`, `'ghost'`
          * @type {Color}
         */
        "color"?: Color;
        /**
          * The icon to use. Options are: `'info'`, `'success'`, `'warning'`, `'danger'`
          * @type {string}
         */
        "icon"?: string;
    }
    interface PaxPagination {
    }
    interface PaxPanel {
        /**
          * If `true`, the panel is expanded.
          * @type {boolean}
         */
        "open"?: boolean;
    }
    interface PaxProgressBar {
        /**
          * The color to use from the pax color palette. Options are: `'success'`, `'warning'`, `'danger'`, `'dark'`, `'light'`
          * @type {Color}
         */
        "color"?: Color;
        /**
          * Use compact design.
          * @type {boolean}
         */
        "compact"?: boolean;
        /**
          * Use inline layout.
          * @type {boolean}
         */
        "inline"?: boolean;
        /**
          * The value determines how much of the progress bar should display. The value should be between 0 and 1.
          * @type {number}
         */
        "value"?: number;
    }
    interface PaxRadio {
        /**
          * If set, the user cannot interact with the checkbox component.
          * @type {boolean}
         */
        "disabled"?: boolean;
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name"?: string;
        /**
          * Gets emitted when the styles change.
         */
        "onPaxStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        /**
          * Gets emitted when the radio component lost focus.
         */
        "onRadioBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted when the radio component has focus.
         */
        "onRadioFocus"?: (event: CustomEvent<void>) => void;
        /**
          * The value of the radio, which is submitted with the form data.
          * @type {string}
         */
        "value"?: string;
    }
    interface PaxRadioGroup {
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name"?: string;
        /**
          * Gets emitted when the styles change.
         */
        "onPaxStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        /**
          * Gets emitted when the value has changed.
         */
        "onRadioGroupChange"?: (event: CustomEvent<RadioGroupChangeEventInterface>) => void;
        /**
          * The value of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "value"?: string;
    }
    interface PaxRow {
    }
    interface PaxSelect {
        /**
          * If set, the user cannot interact with the select component.
          * @type {boolean}
         */
        "disabled"?: boolean;
        /**
          * The error message that is displayed next to the component.
          * @type {string}
         */
        "error"?: string;
        /**
          * If set, the component is visually marked as invalid.
          * @type {boolean}
         */
        "invalid"?: boolean;
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name"?: string;
        /**
          * Gets emitted when the styles change.
         */
        "onPaxStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        /**
          * Gets emitted when the select component lost focus.
         */
        "onSelectBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted when the select component's value changed.
         */
        "onSelectChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Gets emitted when the select component has focus.
         */
        "onSelectFocus"?: (event: CustomEvent<void>) => void;
        /**
          * If set, the user cannot change the value of the select component.
          * @type {boolean}
         */
        "readonly"?: boolean;
        /**
          * The value of the select component.
          * @type {string}
         */
        "value"?: string;
    }
    interface PaxSelectOption {
        /**
          * Add an additional abbreviation to a select option.
         */
        "abbreviation"?: string;
        /**
          * If `true`, the user cannot interact with the select option.
         */
        "disabled"?: boolean;
        /**
          * Marks the select option, whose value is submitted with the form data.
          * @type {string}
         */
        "selected"?: boolean;
        /**
          * The value of the select option, which is submitted with the form data.
          * @type {string}
         */
        "value"?: string;
    }
    interface PaxTextarea {
        /**
          * If set, the user cannot interact with the textarea component.
          * @type {boolean}
         */
        "disabled"?: boolean;
        /**
          * The error message that is displayed next to the component.
          * @type {string}
         */
        "error"?: string;
        /**
          * If set, the component is visually marked as invalid.
          * @type {boolean}
         */
        "invalid"?: boolean;
        /**
          * The name of the hidden input, which is submitted with the form data.
          * @type {string}
         */
        "name"?: string;
        /**
          * Gets emitted when the styles change.
         */
        "onPaxStyle"?: (event: CustomEvent<StyleEventDetail>) => void;
        /**
          * Gets emitted when the textarea component lost focus.
         */
        "onTextareaBlurred"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted when the textarea component's value changed.
         */
        "onTextareaChanged"?: (event: CustomEvent<TextareaChangeEventDetail>) => void;
        /**
          * Gets emitted when the textarea component has focus.
         */
        "onTextareaFocused"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted when a keyboard input occurred.
         */
        "onTextareaInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * The placeholder message that should be displayed when not value is set.
          * @type {string}
         */
        "placeholder"?: string;
        /**
          * If set, the user cannot change the value of the textarea component.
          * @type {boolean}
         */
        "readonly"?: boolean;
        /**
          * The initial height of the textarea component defined in rows.
          * @type {number}
         */
        "rows"?: number;
        /**
          * The value of the textarea component.
          * @type {string}
         */
        "value"?: string | null;
    }
    interface PaxTitle {
        /**
          * The headline level of the native element.
          * @type {number}
         */
        "level"?: number;
    }
    interface PaxTooltip {
        /**
          * If set, the tooltip displays a close button.
         */
        "closable"?: boolean;
        /**
          * Gets emitted after the dialog component is closed.
         */
        "onAfterClose"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted after the dialog component is opened.
         */
        "onAfterOpen"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted before the dialog component is closed.
         */
        "onBeforeClose"?: (event: CustomEvent<void>) => void;
        /**
          * Gets emitted before the dialog component is opened.
         */
        "onBeforeOpen"?: (event: CustomEvent<void>) => void;
    }
    interface IntrinsicElements {
        "pax-badge": PaxBadge;
        "pax-busy-indicator": PaxBusyIndicator;
        "pax-button": PaxButton;
        "pax-card": PaxCard;
        "pax-carousel": PaxCarousel;
        "pax-carousel-item": PaxCarouselItem;
        "pax-checkbox": PaxCheckbox;
        "pax-col": PaxCol;
        "pax-datepicker": PaxDatepicker;
        "pax-dialog": PaxDialog;
        "pax-grid": PaxGrid;
        "pax-headline": PaxHeadline;
        "pax-icon": PaxIcon;
        "pax-input": PaxInput;
        "pax-item": PaxItem;
        "pax-label": PaxLabel;
        "pax-link": PaxLink;
        "pax-list": PaxList;
        "pax-message-strip": PaxMessageStrip;
        "pax-pagination": PaxPagination;
        "pax-panel": PaxPanel;
        "pax-progress-bar": PaxProgressBar;
        "pax-radio": PaxRadio;
        "pax-radio-group": PaxRadioGroup;
        "pax-row": PaxRow;
        "pax-select": PaxSelect;
        "pax-select-option": PaxSelectOption;
        "pax-textarea": PaxTextarea;
        "pax-title": PaxTitle;
        "pax-tooltip": PaxTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "pax-badge": LocalJSX.PaxBadge & JSXBase.HTMLAttributes<HTMLPaxBadgeElement>;
            "pax-busy-indicator": LocalJSX.PaxBusyIndicator & JSXBase.HTMLAttributes<HTMLPaxBusyIndicatorElement>;
            "pax-button": LocalJSX.PaxButton & JSXBase.HTMLAttributes<HTMLPaxButtonElement>;
            "pax-card": LocalJSX.PaxCard & JSXBase.HTMLAttributes<HTMLPaxCardElement>;
            "pax-carousel": LocalJSX.PaxCarousel & JSXBase.HTMLAttributes<HTMLPaxCarouselElement>;
            "pax-carousel-item": LocalJSX.PaxCarouselItem & JSXBase.HTMLAttributes<HTMLPaxCarouselItemElement>;
            "pax-checkbox": LocalJSX.PaxCheckbox & JSXBase.HTMLAttributes<HTMLPaxCheckboxElement>;
            "pax-col": LocalJSX.PaxCol & JSXBase.HTMLAttributes<HTMLPaxColElement>;
            "pax-datepicker": LocalJSX.PaxDatepicker & JSXBase.HTMLAttributes<HTMLPaxDatepickerElement>;
            "pax-dialog": LocalJSX.PaxDialog & JSXBase.HTMLAttributes<HTMLPaxDialogElement>;
            "pax-grid": LocalJSX.PaxGrid & JSXBase.HTMLAttributes<HTMLPaxGridElement>;
            "pax-headline": LocalJSX.PaxHeadline & JSXBase.HTMLAttributes<HTMLPaxHeadlineElement>;
            "pax-icon": LocalJSX.PaxIcon & JSXBase.HTMLAttributes<HTMLPaxIconElement>;
            "pax-input": LocalJSX.PaxInput & JSXBase.HTMLAttributes<HTMLPaxInputElement>;
            "pax-item": LocalJSX.PaxItem & JSXBase.HTMLAttributes<HTMLPaxItemElement>;
            "pax-label": LocalJSX.PaxLabel & JSXBase.HTMLAttributes<HTMLPaxLabelElement>;
            "pax-link": LocalJSX.PaxLink & JSXBase.HTMLAttributes<HTMLPaxLinkElement>;
            "pax-list": LocalJSX.PaxList & JSXBase.HTMLAttributes<HTMLPaxListElement>;
            "pax-message-strip": LocalJSX.PaxMessageStrip & JSXBase.HTMLAttributes<HTMLPaxMessageStripElement>;
            "pax-pagination": LocalJSX.PaxPagination & JSXBase.HTMLAttributes<HTMLPaxPaginationElement>;
            "pax-panel": LocalJSX.PaxPanel & JSXBase.HTMLAttributes<HTMLPaxPanelElement>;
            "pax-progress-bar": LocalJSX.PaxProgressBar & JSXBase.HTMLAttributes<HTMLPaxProgressBarElement>;
            "pax-radio": LocalJSX.PaxRadio & JSXBase.HTMLAttributes<HTMLPaxRadioElement>;
            "pax-radio-group": LocalJSX.PaxRadioGroup & JSXBase.HTMLAttributes<HTMLPaxRadioGroupElement>;
            "pax-row": LocalJSX.PaxRow & JSXBase.HTMLAttributes<HTMLPaxRowElement>;
            "pax-select": LocalJSX.PaxSelect & JSXBase.HTMLAttributes<HTMLPaxSelectElement>;
            "pax-select-option": LocalJSX.PaxSelectOption & JSXBase.HTMLAttributes<HTMLPaxSelectOptionElement>;
            "pax-textarea": LocalJSX.PaxTextarea & JSXBase.HTMLAttributes<HTMLPaxTextareaElement>;
            "pax-title": LocalJSX.PaxTitle & JSXBase.HTMLAttributes<HTMLPaxTitleElement>;
            "pax-tooltip": LocalJSX.PaxTooltip & JSXBase.HTMLAttributes<HTMLPaxTooltipElement>;
        }
    }
}
